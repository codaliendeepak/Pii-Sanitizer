{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipheriv, createDecipheriv, createHash, randomBytes } from \"node:crypto\";\n\ntype PiiType =\n| 'pan_card'\n| 'credit_card'\n| 'cvv'\n| 'password'\n| 'email'\n| 'phone'\n| 'aadhar'\n| 'custom';\n\ninterface PiiSanitizerConfig {\n    \n    signingSecret: string; // required: used for signature header\n    \n    //list of routes to check \n    allowlistRoutes?: Array<RegExp | string>;\n\n    //list of routes not to check\n    denylistRoutes?: Array<RegExp | string>;\n\n    // sanitizer config to disable\n    disable?: boolean; //default false\n    \n    // Control detection behavior\n    // keysToSanitize?: string[]; \n\n    // regex to look for in the body\n    regexToSanitize?: string[]; \n    \n    //pii type to detect \n    detectors?: Partial<PiiType>\n    \n    // If provided, only these keys will be sanitized (exact match)\n    fieldsToSanitize?: string[];\n\n    // If provided, these keys will be skipped (exact match)\n    fieldsToSkip?: string[];\n\n    // Performance knobs\n    maxStringScanLen?: number; // do not run regex on very long strings\n}\n\nclass Sanitizer{\n\n    private cfg:PiiSanitizerConfig;\n\n    constructor(cfg:PiiSanitizerConfig){\n        this.cfg = cfg;\n        if (!this.cfg?.signingSecret) throw new Error('signingSecret is required');\n    }\n\n    sanitizeObject(obj:any,route:string):any{\n\n        if (this.cfg.disable) return obj;\n         // Route allow/deny logic (defensive)\n        if (this.cfg.allowlistRoutes && !this.cfg.allowlistRoutes.includes(route)) return obj;\n        if (this.cfg.denylistRoutes && this.cfg.denylistRoutes.includes(route)) return obj;\n\n        const sanitizedObjectValue = this.walk(obj,[]);\n        return sanitizedObjectValue;\n    }\n\n    decodeBody(object:any):any{\n        if(object && typeof object ==\"object\" && !Array.isArray(object)){\n            const out:any ={}\n            for(const [k,v] of Object.entries(object)){\n                out[k] = this.decodeBody(v)\n            }\n            return out;\n        }\n        //if it is array \n        if (Array.isArray(object)) {\n            return object.map((item) => this.decodeBody(item));\n        }\n        //if it is encoded\n        if(typeof object == \"string\" && object.includes(':')){\n            return this.decodeValue(object)\n        }\n        return object\n    }\n\n    expressMiddleware(){\n        return (req:any,res:any,next:any)=>{\n            const route = req.url || '';\n            const body  = req.body;\n            //zero to check for route if present in skip list or allow list \n            if((this.cfg.allowlistRoutes && !this.cfg.allowlistRoutes.includes(route)) || (this.cfg.denylistRoutes && this.cfg.denylistRoutes.includes(route))){\n                return next();\n            }else{\n                req.body = this.sanitizeObject(body,route);\n            }\n            return next()\n        }\n    }\n\n    detectPatternToSanitize(key:any,value:string):PiiType{\n        //if key is similar to or has some of the pii type or the value is a pii pattern type return the piitype \n        //for pan card assuming it is capital case \n        let lowerKey = key.toLowerCase();\n        if(/^[A-Z]{5}\\d{4}[A-Z]$/g.test(value)||/pan|pan_card/.test(lowerKey)){\n            return \"pan_card\";\n        }\n        if(/^\\d{10}/g.test(value)||/mobile|phone/.test(lowerKey)){\n            return \"phone\"\n        }\n        if(/^\\d{12}/g.test(value)){\n            return \"aadhar\"\n        }\n        if(/cvv|cvc|cvn|cid/.test(lowerKey) || /\\d{2,4}/.test(value)){\n            return \"cvv\";\n        }\n        if(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,}$/.test(value)){\n            return \"email\"\n        }\n        if(/password|pwd|passphrase/.test(lowerKey)){\n            return \"password\";\n        }\n        if((/credit|debit/.test(lowerKey)) || (value.length>13 && value.length<19 && this.luhnAlgorithm(value))){\n            return \"credit_card\";\n        }\n        return \"custom\";\n    }\n\n    private luhnAlgorithm(num: string): boolean {\n        let sum = 0;\n        let alt = false;\n        //detect even position number from right and double them if greater than 9 then and add their digits  \n        for (let i = num.length - 1; i >= 0; i--) {\n            let n = parseInt(num[i], 10);\n            if (alt) {\n                n *= 2;\n                if (n > 9) n -= 9;\n            }\n            sum += n;\n            alt = !alt;\n        }\n        return sum % 10 === 0;\n    }\n\n    maskPattern(piiType:PiiType,val:string):string{\n        switch(piiType){\n            case 'aadhar':\n                return this.encodeValue(val) // replace(/^\\d{4}\\d{4}(\\d{4})$/, 'XXXXX$1');\n            case 'credit_card':\n                return this.encodeValue(val); // replace(/^(\\d{4})$/g,'XXXXX$1');\n            case 'email':\n                return this.encodeValue(val);\n                // const [user, domain] = val.split('@');\n                // return user[0] + \"****@\" + domain;\n            case 'cvv':\n                return this.encodeValue(val)  // replace(/(\\d{1})\\d/,'$1XXXX');\n            case 'pan_card':\n                return this.encodeValue(val)  //replace(/^(.{2})(.*)(.{2})$/, (m, f, mid, l) => f + \"XXXXXX\" + l );\n            case 'password':\n                return this.encodeValue(val);\n            case 'phone':\n                return this.encodeValue(val); // replace(/.(?=.{2})/g, 'X');\n            case 'custom':\n            default:\n                return this.encodeValue(val);  // replace(/./g, 'X');\n        }\n    }\n\n    // Always derive a proper 32-byte key from signingSecret\n    private getKey(): Buffer {\n        return createHash(\"sha256\").update(this.cfg.signingSecret).digest();\n    }\n\n    private encodeValue(val: string): string {\n        const iv = randomBytes(16);\n        const key = this.getKey();\n        const cipher = createCipheriv(\"aes-256-ctr\", key,iv);\n        const encrypted = Buffer.concat([cipher.update(val, \"utf8\"), cipher.final()]);\n        const encryptedValue = iv.toString(\"hex\") + \":\" + encrypted.toString(\"hex\");\n        return encryptedValue;\n    }\n\n    private decodeValue(data:string){\n        const [ivHex, encryptedHex] = data.split(\":\");\n        const iv = Buffer.from(ivHex, \"hex\");\n        const encryptedText = Buffer.from(encryptedHex, \"hex\");\n        const decipher = createDecipheriv(\"aes-256-ctr\", this.getKey(), iv);\n        const decrypted = Buffer.concat([decipher.update(encryptedText), decipher.final()]);\n        return decrypted.toString(\"utf8\");\n    }\n\n    \n    walk(val:any,path:string[]){\n        if (val && typeof val === \"object\" && !Array.isArray(val)) {\n            const out:any= {};\n            for (const [k, v] of Object.entries(val)) {\n              out[k] = this.walk(v, [...path, k]);\n            }\n            return out;\n        }    \n        if(typeof(val)==\"string\"){\n            \n            const key =  path[path.length-1];\n            \n            //first check if to check for fields to sanitize and fields to skip if present sanitize those \n\n            if (this.cfg.fieldsToSkip?.includes(key)) return val;\n\n            //second to check if the regex is present will  only detect that regex \n            if(this.cfg.regexToSanitize?.length){\n                for (const reStr of this.cfg.regexToSanitize) {\n                    const re = new RegExp(reStr, \"g\");\n                    if (re.test(val)) {\n                        return val.replace(re, (m) => this.maskPattern('custom', m));\n                    }\n                }\n            }\n\n            //third check if fields are present\n            if(this.cfg.fieldsToSanitize){\n                if(this.cfg.fieldsToSanitize.includes(key)){\n                    const piiType = this.detectPatternToSanitize(key,val);\n                    return this.maskPattern(piiType,val);\n                }else{\n                    return val;\n                }\n            }\n\n            \n            //by default\n            //check if detectors are present it will check for the all by default detect regex for all the pii types\n            // detectors (auto detection)\n            const piiType = this.detectPatternToSanitize(key, val);\n            if (piiType !== 'custom') {\n                return this.maskPattern(piiType, val);\n            }\n            return val;\n        }\n    }\n}\nmodule.exports = {Sanitizer}"]}